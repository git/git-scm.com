- @section = "about"
- @page_title = "Git - About"

- content_for :sidebar do
  = render 'shared/book'

%div#main
  %h1 About

  %ol#about-nav
    %li
      <a href="#" class="current three-line" id="nav-branching-and-merging" data-section-id="branching-and-merging">Branching and Merging</a>
    %li
      <a href="#" class="two-line" id="nav-small-and-fast" data-section-id="small-and-fast">Small and Fast</a>
    %li
      <a href="#" class="one-line" id="nav-distributed" data-section-id="distributed">Distributed</a>
    %li
      <a href="#" class="two-line" id="nav-info-assurance" data-section-id="info-assurance">Data Assurance</a>
    %li
      <a href="#" class="two-line" id="nav-staging-area" data-section-id="staging-area">Staging Area</a>
    %li
      <a href="#" class="three-line" id="nav-free-and-open-source" data-section-id="free-and-open-source">Free and Open Source</a>

  %section.about#branching-and-merging.current
    %h2 Branching and Merging

    %p
      The Git feature that really makes it stand apart from nearly every other SCM out there is its branching model.

    %p
      Git allows and encourages you to have multiple local branches that can be entirely independent of each other. The creation, merging, and deletion of those lines of development takes seconds.

    %p
      This means that you can do things like:

    %ul.bullets
      %li
        <strong>Frictionless Context Switching</strong>. Create a branch to try out an idea, commit a few times, switch back to where you branched from, apply a patch, switch back to where you are experimenting, and merge it in.
      %li
        <strong>Role-Based Codelines</strong>. Have a branch that always contains only what goes to production, another that you merge work into for testing, and several smaller ones for day to day work.
      %li
        <strong>Feature Based Workflow</strong>. Create new branches for each new feature you're working on so you can seamlessly switch back and forth between them, then delete each branch when that feature gets merged into your main line.
      %li
        <strong>Disposable Experimentation</strong>. Create a branch to experiment in, realize it's not going to work, and just delete it - abandoning the work—with nobody else ever seeing it (even if you've pushed other branches in the meantime).

    %p.center
      <img src="/images/about/branches.png" alt="Branches" />

    %p
      Notably, when you push to a remote repository, you do not have to push all of your branches. You can choose to share just one of your branches, a few of them, or all of them. This tends to free people to try new ideas without worrying about having to plan how and when they are going to merge it in or share it with others.

    %p
      There are ways to accomplish some of this with other systems, but the work involved is much more difficult and error-prone. Git makes this process incredibly easy and it changes the way most developers work when they learn it.

    %div.bottom-nav
      =link_to "Small and Fast →", "#", {:class => 'next', 'data-section-id' => 'small-and-fast'}


  %section.about#small-and-fast
    %h2 Small and Fast

    %p
      <strong>Git is fast</strong>. With Git, nearly all operations are performed locally, giving it a huge speed advantage on centralized systems that constantly have to communicate with a server somewhere.

    %p
      Git was built to work on the Linux kernel, meaning that it has had to effectively handle large repositories from day one. Git is written in C, reducing the overhead of runtimes associated with higher-level languages. Speed and performance has been a primary design goal of the Git from the start.

    %h3 Benchmarks

    %p 
      Let's see how common operations stack up against
      Subversion, a common centralized version control system that is similar
      to CVS or Perforce. <em>Smaller is faster.</em>

    %table{:width => '100%'}
      %tr
        %td
          =raw gchart("Commit A", [['git', 0.649], ['svn', 2.6]])
        %td
          =raw gchart("Commit B", [['git', 1.53], ['svn', 24.7]])
        %td
          =raw gchart("Diff Curr", [['git', 0.257], ['svn', 1.09]])
        %td
          =raw gchart("Diff Rec", [['git', 0.248], ['svn', 3.99]])
        %td
          =raw gchart("Diff Tags", [['git', 1.17], ['svn', 83.57]])
        %td
          =raw gchart("Clone", [['git*', 21.0], ['git', 107.5], ['svn', 14.0]])
      %tr
        %td
          =raw gchart("Log (50)", [['git', 0.012], ['svn', 0.381]])
        %td
          =raw gchart("Log (All)", [['git', 0.519], ['svn', 169.197]])
        %td
          =raw gchart("Log (File)", [['git', 0.601], ['svn', 82.843]])
        %td
          =raw gchart("Update", [['git', 0.896], ['svn', 2.816]])
        %td
          =raw gchart("Blame", [['git', 1.91], ['svn', 3.04]])
        %td
          =raw gchart("Size", [['git', 181], ['svn', 132]])
    %p 
      For testing, large AWS instances were set up in the same availability zone.
      Git and SVN were installed on both machines, the Ruby repository was copied to
      both Git and SVN servers, and common operations were performed on both.
    %p
      In some cases the commands don't match up exactly. Here, matching on the lowest
      common denominator was attempted. For example, the 'commit' tests also include
      the time to push for Git, though most of the time you would not actually be pushing
      to the server immediately after a push where the two commands cannot be separated
      in SVN.
    %p
      All of these times are in seconds.

    %table.benchmarks
      %tr
        %th Operation
        %th
        %th.right Git
        %th.right SVN
      =raw rchart("Commit Files (A)", [['git', 0.64], ['svn', 2.60]], "Add, commit and push 113 modified files (2164+, 2259-)")
      =raw rchart("Commit Images (B)", [['git', 1.53], ['svn', 24.70]], "Add, commit and push 1000 1k images")
      =raw rchart("Diff Current", [['git', 0.25], ['svn', 1.09]], "Diff 187 changed files (1664+, 4859-) against last commit")
      =raw rchart("Diff Recent", [['git', 0.248], ['svn', 3.99]], "Diff against 4 commits back (269 changed/3609+,6898-)")
      =raw rchart("Diff Tags", [['git', 1.17], ['svn', 83.57]], "Diff two tags against each other (v1.9.1.0/v1.9.3.0 )")
      =raw rchart("Log (50)", [['git', 0.012], ['svn', 0.381]], "Log of the last 50 commits (19k of output)")
      =raw rchart("Log (All)", [['git', 0.52], ['svn', 169.20]], "Log of all commits (26,056 commits - 9.4M of output)")
      =raw rchart("Log (File)", [['git', 0.60], ['svn', 82.84]], "Log of the history of a single file (array.c - 483 revs)")
      =raw rchart("Update", [['git', 0.90], ['svn', 2.82]], "Pull of Commit A scenario (113 files changed, 2164+, 2259-)")
      =raw rchart("Blame", [['git', 1.91], ['svn', 3.04]], "Line annotation of a single file (array.c)")

    %p
      Note that this is the best case scenario for SVN - a server with no load with an
      80MB/s bandwidth connection to the client machine.  Nearly all of these
      times would be even worse for SVN if that connection was slower, while
      many of the Git times would not be affected.
    %p
      Clearly, in many of these common version control operations, <strong>Git is
      one or two orders of magnitude faster than SVN</strong>, even under ideal conditions
      for SVN.
    %p
      One place where Git is slower is in the initial clone operation. 
      Here, Git is downloading the entire history rather than only the latest
      version. As seen in the above charts, it's not considerably slower for an operation
      that is only performed once.

    %table.benchmarks
      %tr
        %th Operation
        %th
        %th.right Git*
        %th.right Git
        %th.right SVN
      =raw trchart("Clone", [['git*', 21.0], ['git', 107.50], ['svn', 14.00]], "Clone and shallow clone(*) in Git vs checkout in SVN")
      =raw trchart("Size (M)", [[nil, nil], ['git', 181], ['svn', 132]], "Size of total client side data and files after clone/checkout (in M)")

    %p
      It's also interesting to note that the size of the data on the client side
      is very similar even though Git also has every version of every file for the
      entire history of the project. This illustrates how efficient it is at compressing
      and storing data on the client side.

    %div.bottom-nav
      =link_to "← Branching and Merging", "#", {:class => 'previous', 'data-section-id' => 'branching-and-merging'}
      =link_to "Distributed →", "#", {:class => 'next', 'data-section-id' => 'distributed'}

  %section.about#distributed
    %h2 Distributed

    %p
      One of the nicest features of any Distributed SCM, Git included, is that it's distributed. This means that instead of doing a "checkout" of the current tip of the source code, you do a "clone" of the entire repository.

    %h3 Multiple Backups

    %p
      This means that even if you're using a centralized workflow, every user essentially has a full backup of the main server. Each of these copies could be pushed up to replace the main server in the event of a crash or corruption. In effect, there is no single point of failure with Git unless there is only a single copy of the repository.

    %h3 Any Workflow

    %p
      Because of Git's distributed nature and superb branching system, an almost endless number of workflows can be implemented with relative ease.

    %h4 Subversion-Style Workflow

    %p
      A centralized workflow is very common, especially from people transitioning from a centralized system. Git will not allow you to push if someone has pushed since the last time you fetched, so a centralized model where all developers push to the same server works just fine.

    %p.center
      <img src="/images/about/workflow-a.png" alt="Workflow A" />

    %h4 Integration Manager Workflow

    %p
      Another common Git workflow involves an integration manager — a single person who commits to the 'blessed' repository. A number of developers then clone from that repository, push to their own independent repositories, and ask the integrator to pull in their changes. This is the type of development model often seen with open source or GitHub repositories.

    %p.center
      <img src="/images/about/workflow-b.png" alt="Workflow B" />

    %h4 Dictator and Lieutenants Workflow

    %p
      For more massive projects, a development workflow like that of the Linux kernel is often effective.
      In this model, some people ('lieutenants') are in charge of a specific subsystem of the project and they merge in all changes related to that subsystem. Another integrator (the 'dictator') can pull changes from only his/her lieutenants and then push to the 'blessed' repository that everyone then clones from again.

    %p.center
      <img src="/images/about/workflow-c.png" alt="Workflow C" />

    %div.bottom-nav
      =link_to "← Small and Fast", "#", {:class => 'previous', 'data-section-id' => 'small-and-fast'}
      =link_to "Data Assurance →", "#", {:class => 'next', 'data-section-id' => 'info-assurance'}

  %section.about#info-assurance
    %h2 Data Assurance

    %p
      The data model that Git uses ensures the cryptographic integrity of every bit
      of your project.  Every file and commit is checksummed and retrieved by its
      checksum when checked back out. It's impossible to get anything out of Git 
      other than the <strong>exact bits you put in</strong>.

    %img{:src => "/images/assurance.png"}

    %p
      It is also impossible to change any file, date, commit message, or any other
      data in a Git repository without changing the IDs of everything after it.
      This means that if you have a commit ID, you can be assured not only that
      your project is exactly the same as when it was committed, but 
      that nothing in its history was changed.

    %p
      Most centralized version control systems provide no such integrity by default.

    %div.bottom-nav
      =link_to "← Distributed", "#", {:class => 'previous', 'data-section-id' => 'distributed'}
      =link_to "Staging Area →", "#", {:class => 'next', 'data-section-id' => 'staging-area'}

  %section.about#staging-area
    %h2 Staging Area

    %p
      Unlike the other systems, Git has something called the "staging area" or "index". This is an intermediate area where commits can be formatted and reviewed before completing the commit.

    %p
      One thing that sets Git apart from other tools is that it's possible to quickly stage some of your files and commit them without committing all of the other modified files in your working directory or having to list them on the command line during the commit.

    %p.center
      <img src="/images/about/index1.png" alt="Index 1" />

    %p
      This allows you to stage only portions of a modified file. Gone are the days of making two logically unrelated modifications to a file before you realized that you forgot to commit one them. Now you can just stage the change you need for the current commit and stage the other change for the next commit. This feature scales up to as many different changes to your file as needed.

    %p
      Of course, Git also makes it easy to ignore this feature if you don't want that kind of control — just add a '-a' to your commit command in order to add all changes to all files to the staging area.

    %p.center
      <img src="/images/about/index2.png" alt="Index 2" />

    %div.bottom-nav
      =link_to "← Data Assurance", "#", {:class => 'previous', 'data-section-id' => 'info-assurance'}
      =link_to "Free and Open Source →", "#", {:class => 'next', 'data-section-id' => 'free-and-open-source'}


  %section.about#free-and-open-source
    %h2 Free and Open Source

    %p
      Git is released under the <a href="https://github.com/git/git/blob/master/COPYING">GPLv2</a> <a href="http://www.opensource.org/docs/osd">open source license</a>.  This means that you are free to <a href="https://github.com/git/git">inspect the source code</a> at any time or <a href="https://github.com/git/git/blob/master/Documentation/SubmittingPatches">contribute</a> to the project yourself.

    %p
      Under Git's GPLv2 software license, you <strong>may</strong>:

      %ul.bullets
        %li Use Git on open or proprietary projects for free, forever
        %li Download, inspect and modify the source code to Git
        %li Make proprietary changes to Git that you do not redistribute publicly
        %li Call Git binaries from your open or proprietary programs
        %li Publicly redistribute Git binaries with open or proprietary programs, given that they are unmodified or the modifications are public

    %p
      Under this license you <strong>may not</strong>:

      %ul.bullets
        %li Make proprietary changes to Git and publicly redistribute it without sharing the changes
        %li Make and publicly distribute changes to Git under a different license
        %li Use source code from the Git repository in a different project without permission

    %div.bottom-nav
      =link_to "← Staging Area", "#", {:class => 'previous', 'data-section-id' => 'staging-area'}
